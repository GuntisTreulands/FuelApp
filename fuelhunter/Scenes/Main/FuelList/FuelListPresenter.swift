//
//  FuelListPresenter.swift
//  fuelhunter
//
//  Created by Guntis on 03/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol FuelListPresentationLogic {
	func updateCityView(response: FuelList.UpdateCityView.Response)
	func presentData(response: FuelList.FetchPrices.Response)
	func revealMapView(response: FuelList.RevealMap.Response)
}

class FuelListPresenter: FuelListPresentationLogic {
	weak var viewController: FuelListDisplayLogic?

	// MARK: FuelListPresentationLogic

	func updateCityView(response: FuelList.UpdateCityView.Response) {
		let viewModel = FuelList.UpdateCityView.ViewModel(currentCityName: response.currentCityName, currentCityGPSIconEnabled: response.currentCityGPSIconEnabled)
		viewController?.updateCityView(viewModel: viewModel)
	}

	func presentData(response: FuelList.FetchPrices.Response) {

		var displayedPrices: [[FuelList.FetchPrices.ViewModel.DisplayedPrice]] = []

		let fuelTypesStatus = AppSettingsWorker.shared.getFuelTypeToggleStatus()

		if fuelTypesStatus.typeDD {
			let typeDDPrices = FuelListWorker.getPrices(with: .typeDD, from: response.fetchedPrices)
			if !typeDDPrices.isEmpty { displayedPrices.append(typeDDPrices) }
		}

		if fuelTypesStatus.typeDDPro {
			let typeDDProPrices = FuelListWorker.getPrices(with: .typeDDPro, from: response.fetchedPrices)
			if !typeDDProPrices.isEmpty { displayedPrices.append(typeDDProPrices) }
		}

		if fuelTypesStatus.type95 {
			let type95Prices = FuelListWorker.getPrices(with: .type95, from: response.fetchedPrices)
			if !type95Prices.isEmpty { displayedPrices.append(type95Prices) }
		}

		if fuelTypesStatus.type98 {
			let type98Prices = FuelListWorker.getPrices(with: .type98, from: response.fetchedPrices)
			if !type98Prices.isEmpty { displayedPrices.append(type98Prices) }
		}

		if fuelTypesStatus.typeGas {
			let typeGasPrices = FuelListWorker.getPrices(with: .typeGas, from: response.fetchedPrices)
			if !typeGasPrices.isEmpty { displayedPrices.append(typeGasPrices) }
		}

		let viewModel = FuelList.FetchPrices.ViewModel(displayedPrices: displayedPrices, insertItems: response.insertItems, deleteItems: response.deleteItems, updateItems: response.updateItems, insertSections: response.insertSections, deleteSections: response.deleteSections, updateSections: response.updateSections)
		viewController?.displayData(viewModel: viewModel)
	}


	func revealMapView(response: FuelList.RevealMap.Response) {

		let viewModel = FuelList.RevealMap.ViewModel(selectedCompany: response.selectedCompany, selectedFuelType: response.selectedFuelType, selectedCellYPosition: response.selectedCellYPosition)

		viewController?.revealMapView(viewModel: viewModel)
	}
}
