//
//  FuelListRouter.swift
//  fuelhunter
//
//  Created by Guntis on 03/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FuelListRoutingLogic {
	func routeToSettings()
	func routeToAppAccuracyInfo()
	func routeToAppSavingsInfo()
	func routeToMapView(atYLocation yLocation: CGFloat, selectedFuelCompany company: CompanyEntity, selectedFuelType fuelType: FuelType)
	func revealCompanyChanges()
}

protocol FuelListDataPassing {
	var dataStore: FuelListDataStore? { get }
}

class FuelListRouter: NSObject, FuelListRoutingLogic, FuelListDataPassing {
	weak var viewController: FuelListViewController?
	var dataStore: FuelListDataStore?
	let coordinator = FuelListToMapViewTransitionCoordinator()
	
  	// MARK: FuelListRoutingLogic

	@objc func routeToSettings() {
		viewController?.navigationController?.delegate = nil
  		navigateTo(source: viewController!, destination: SettingsViewController())
  	}
  	
  	func routeToAppAccuracyInfo() {
  		viewController?.navigationController?.delegate = nil
  		navigateTo(source: viewController!, destination: AppAccuracyInfoViewController())
  	}

	func routeToAppSavingsInfo() {
		viewController?.navigationController?.delegate = nil
  		navigateTo(source: viewController!, destination: AppSavingsInfoViewController())
	}

	func routeToMapView(atYLocation yLocation: CGFloat, selectedFuelCompany company: CompanyEntity, selectedFuelType fuelType: FuelType) {

		viewController?.navigationController?.delegate = coordinator
		let destination = MapViewController()
		destination.router?.previousViewController = viewController!
		destination.router?.dataStore?.selectedCompany = company
		destination.router?.dataStore?.selectedFuelType = fuelType
		destination.router?.dataStore?.yLocation = yLocation
		navigateTo(source: viewController!, destination: destination)
	}

	func revealCompanyChanges() {
		let destinationVC = CompanyChangesViewController()
		destinationVC.providesPresentationContextTransitionStyle = true
		destinationVC.definesPresentationContext = true
		destinationVC.modalPresentationStyle=UIModalPresentationStyle.overCurrentContext
		viewController!.present(destinationVC, animated: true) { }
	}
	
  	// MARK: Navigation  
	func navigateTo(source: FuelListViewController, destination: UIViewController) {
		source.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
		source.navigationController?.navigationBar.topItem?.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
		source.show(destination, sender: nil)
  	}
}
