//
//  FuelListRouter.swift
//  fuelhunter
//
//  Created by Guntis on 03/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FuelListRoutingLogic {
	func routeToSettings()
	func routeToMapView(atYLocation yLocation: CGFloat, selectedFuelCompany company: CompanyEntity, selectedFuelType fuelType: FuelType, selectedPrice price: PriceEntity)
	func revealCityNameExplainView()
}

protocol FuelListDataPassing {
	var dataStore: FuelListDataStore? { get set }
	var navigationController: UINavigationController? { get set }
}

class FuelListRouter: NSObject, FuelListRoutingLogic, FuelListDataPassing {
	weak var viewController: FuelListViewController?
	var dataStore: FuelListDataStore?
	var navigationController: UINavigationController?
	var coordinator = FuelListToMapViewTransitionCoordinator()
	
  	// MARK: FuelListRoutingLogic

	@objc func routeToSettings() {
		viewController?.navigationController?.delegate = nil
  		navigateTo(source: viewController!, destination: SettingsViewController())
  	}

	func routeToMapView(atYLocation yLocation: CGFloat, selectedFuelCompany company: CompanyEntity, selectedFuelType fuelType: FuelType, selectedPrice price: PriceEntity) {

		coordinator.customOriginalViewController = viewController
		navigationController?.delegate = coordinator

		let destination = MapViewController()
		destination.router?.previousViewController = viewController!
		destination.router?.dataStore?.selectedCompany = company
		destination.router?.dataStore?.selectedFuelType = fuelType
		destination.router?.dataStore?.selectedPrice = price
		destination.router?.dataStore?.yLocation = yLocation
		navigateTo(source: viewController!, destination: destination)
	}

	func revealCityNameExplainView() {
		let destinationVC = LoadedCityExplainViewController()
		destinationVC.providesPresentationContextTransitionStyle = true
		destinationVC.definesPresentationContext = true
		destinationVC.modalPresentationStyle=UIModalPresentationStyle.overCurrentContext
		viewController!.present(destinationVC, animated: true) { }
	}
	
  	// MARK: Functions

	private func navigateTo(source: FuelListViewController, destination: UIViewController) {
//		source.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
//		source.navigationController?.navigationBar.topItem?.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)

		navigationController?.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
		navigationController?.navigationBar.topItem?.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)

		navigationController?.show(destination, sender: nil)
		navigationController?.setNavigationBarHidden(false, animated: true)

		//		let rootVc = ScenesManager.shared.window?.rootViewController as! UINavigationController
		//		rootVc.setNavigationBarHidden(false, animated: true)
		//
		//		rootVc.viewControllers.last!.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
		//		rootVc.viewControllers.last!.navigationController?.navigationBar.topItem?.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
		//		rootVc.show(destination, sender: nil)
  	}
}
