//
//  MapInteractor.swift
//  fuelhunter
//
//  Created by Guntis on 12/08/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol MapBusinessLogic {
  	func doSomething(request: Map.MapData.Request)
  	func userPressedOnMapPin(request: Map.MapWasPressed.Request)
}

protocol MapDataStore {
  	var selectedFuelType: FuelType { get set }
  	var selectedCompany: Company? { get set }
  	var selectedPricesArray: [Price]? { get set }
	var yLocation: CGFloat { get set }
}

class MapInteractor: MapBusinessLogic, MapDataStore {
	var presenter: MapPresentationLogic?
  	var worker: MapWorker?
  	var selectedFuelType: FuelType = .type95
  	var selectedCompany: Company?
	var selectedPricesArray: [Price]?
	var yLocation: CGFloat = 0

	var convertedDataArray: [Map.MapData.ViewModel.DisplayedMapPoint] = []
	var mapPoints: [MapPoint] = []
	var selectedPriceObject: Price?

  	// MARK: MapBusinessLogic

  	func doSomething(request: Map.MapData.Request) {
    	worker = MapWorker()
    	convertedDataArray = worker!.createUsableDataArray(fromPricesArray: selectedPricesArray!)
		mapPoints = createMapPoints(from: convertedDataArray)

		let selectedMapPoint = mapPoints.first(where: {$0.company == selectedCompany}) ?? mapPoints.first

		selectedPriceObject = selectedPricesArray?.first(where: {$0.company == selectedCompany}) ?? selectedPricesArray?.first

		let selectedDisplayedPoint = convertedDataArray.first(where: {$0.company == selectedCompany}) ?? convertedDataArray.first

		let response = Map.MapData.Response.init(displayedPoints: convertedDataArray, mapPoints: mapPoints, selectedDisplayedPoint: selectedDisplayedPoint, selectedMapPoint: selectedMapPoint!)

    	presenter?.presentSomething(response: response)
  	}

  	func userPressedOnMapPin(request: Map.MapWasPressed.Request) {

		selectedCompany = request.mapPoint.company

		selectedPriceObject = selectedPricesArray?.first(where: {$0.company == selectedCompany}) ?? selectedPricesArray?.first

		let selectedDisplayedPoint = convertedDataArray.first(where: {$0.company == selectedCompany}) ?? convertedDataArray.first

		let response = Map.MapWasPressed.Response.init(selectedDisplayedPoint: selectedDisplayedPoint, selectedMapPoint: request.mapPoint, selectedPrice: selectedPriceObject!)

		presenter?.updateToRevealMapPoint(response: response)
  	}

  	// MARK: Functions

  	func createMapPoints(from data: [Map.MapData.ViewModel.DisplayedMapPoint]) -> [MapPoint] {
  		let mapPoints = data.map { MapPoint.init(priceId: $0.id, title: $0.company.name, company: $0.company, address: $0.addressName, coordinate:
  			CLLocationCoordinate2D(latitude: $0.latitude, longitude: $0.longitude), priceText: $0.price, distanceInMeters: $0.distanceInMeters, priceIsCheapest: $0.isPriceCheapest) }

  		return mapPoints
  	}
}
