//
//  AreaEditPagePresenter.swift
//  fuelhunter
//
//  Created by Guntis on 27/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AreaEditPagePresentationLogic {
  	func presentAreaEditPageWithData(response: Area.AreaEditPage.Response)
}

class AreaEditPagePresenter: AreaEditPagePresentationLogic {
  	weak var viewController: AreaEditPageDisplayLogic?
	weak var router: AreaEditPageRouter?

  	// MARK: AreaEditPagePresentationLogic

  	func presentAreaEditPageWithData(response: Area.AreaEditPage.Response) {

		let fetchedArea = response.fetchedArea

		var arrayBasics: [Area.AreaEditPage.ViewModel.DisplayedCell] = []
		var arrayCompanies: [Area.AreaEditPage.ViewModel.DisplayedCell] = []
		var arrayExtraFunctionality: [Area.AreaEditPage.ViewModel.DisplayedCell] = []

		arrayBasics.append(Area.AreaEditPage.ViewModel.DisplayedCell.init(name: fetchedArea.name!, toggleOrCheckmarkIsOn: false, iconName:"", description: "areas_name_title_description".localized(), accessoryType: (fetchedArea.isGPSArea ? .cellAccessoryTypeNone : .cellAccessoryTypeName), functionalityType: (fetchedArea.isGPSArea ? .cellFunctionalityTypeNone : .cellFunctionalityTypeName)))

		arrayBasics.append(Area.AreaEditPage.ViewModel.DisplayedCell.init(name: "areas_cheapest_only_title".localized(), toggleOrCheckmarkIsOn: fetchedArea.cheapPricesOnly, iconName:"", description: "areas_cheapest_only_description".localized(), accessoryType: .cellAccessoryTypeToggle, functionalityType: .cellFunctionalityTypeCheapestOnly))

		if fetchedArea.isGPSArea == false {

			// Notif disabled "areas_notifs_descriptions_disabled"
			// Notif enable  "areas_notifs_descriptions_enabled" + 1 + "areas_notif_1_cent"
			// Notif enable  "areas_notifs_descriptions_enabled" + 2 + "areas_notif_more_cents"
			arrayBasics.append(Area.AreaEditPage.ViewModel.DisplayedCell.init(name: "areas_notifs_title".localized(), toggleOrCheckmarkIsOn: fetchedArea.pushIsOn, iconName:"", description: "areas_notifs_descriptions_disabled".localized(), accessoryType: .cellAccessoryTypeToggle, functionalityType: .cellFunctionalityTypePushNotif))
		}

		if fetchedArea.isGPSArea == false {

			for companyEntry in response.companyEntries {
				let name = companyEntry.stationCount == 1 ? "1 degvielas uzpildes stacija" : "\(companyEntry.stationCount) degvielas uzpildes stacijas"

				arrayCompanies.append(Area.AreaEditPage.ViewModel.DisplayedCell.init(name: companyEntry.name, toggleOrCheckmarkIsOn: companyEntry.enabled, iconName:companyEntry.imageName, description: name, accessoryType: .cellAccessoryTypeCheckMark, functionalityType: .cellFunctionalityTypeCompany))
			}
		}


		if fetchedArea.isGPSArea == false {
			arrayExtraFunctionality.append(Area.AreaEditPage.ViewModel.DisplayedCell.init(name: "areas_delete_title".localized(), toggleOrCheckmarkIsOn: false, iconName:"", description: "areas_delete_description".localized(), accessoryType: .cellAccessoryTypeDelete, functionalityType: .cellFunctionalityTypeDelete))
		}

		var resultArray: [[Area.AreaEditPage.ViewModel.DisplayedCell]] = []

		if fetchedArea.isGPSArea == false {
			resultArray = [arrayBasics, arrayCompanies, arrayExtraFunctionality];
		} else {
			resultArray = [arrayBasics];
		}

    	let viewModel = Area.AreaEditPage.ViewModel(displayedCells: resultArray, areaName: fetchedArea.name!)
    	viewController?.displayData(viewModel: viewModel)
  	}
}
