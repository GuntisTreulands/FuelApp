//
//  AreaEditPageInteractor.swift
//  fuelhunter
//
//  Created by Guntis on 27/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import FirebaseCrashlytics

protocol AreaEditPageBusinessLogic {
  	func getData(request: Area.AreaEditPage.Request)
  	func updateName(request: Area.ChangeName.Request)
  	func toggleCheapest(request: Area.ToggleCheapest.Request)
  	func togglePushNotif(request: Area.ToggleNotif.Request)
  	func deletePressed()
}

protocol AreaEditPageDataStore {
	var areaId: Int! { get set }
}

class AreaEditPageInteractor: NSObject, AreaEditPageBusinessLogic, AreaEditPageDataStore {
	weak var router: AreaEditPageRouter?
  	var presenter: AreaEditPagePresentationLogic?
  	var worker = AreaEditPageWorker()
	var area: AreasEntity!
	var areaId: Int!
	var companyEntries = [Area.AreaEditPage.Response.CompanyEntry]()

	// MARK: AreaEditPageBusinessLogic

  	func getData(request: Area.AreaEditPage.Request) {

		do {
			let fetchRequest: NSFetchRequest<AreasEntity> = AreasEntity.fetchRequest()
			fetchRequest.predicate = NSPredicate(format: "id == %i", areaId)
			let areasObjectArray = try DataBaseManager.shared.mainManagedObjectContext().fetch(fetchRequest)

			area = areasObjectArray.first!


			var companiesDict = [String: Area.AreaEditPage.Response.CompanyEntry]()

			let radiusStations = area.radiusStations?.allObjects ?? [AddressEntity]()
			let enabledStations = area.enabledStations?.allObjects ?? [AddressEntity]()

			for address in radiusStations as! [AddressEntity] {
				var imageName = ""

				if(address.companyName!.contains("Neste")) {
					imageName = "neste_big_logo@3x"
				} else if(address.companyName!.contains("Circle K")) {
					imageName = "circle_k_big_logo@3x"
				} else if(address.companyName!.contains("Kool")) {
					imageName = "kool_big_logo@3x"
				} else if(address.companyName!.contains("Ingrid")) {
					imageName = "ingrida_big_logo@3x"
				} else if(address.companyName!.contains("Kings")) {
					imageName = "kings_big_logo@3x"
				} else if(address.companyName!.contains("Astarte")) {
					imageName = "astarte_big_logo@3x"
				} else if(address.companyName!.contains("VTU")) {
					imageName = "vtu_big_logo@3x"
				} else if(address.companyName!.contains("Viada")) {
					imageName = "viada_big_logo@3x"
				} else if(address.companyName!.contains("Gotika")) {
					imageName = "gotika_big_logo@3x"
				} else if(address.companyName!.contains("Dinaz")) {
					imageName = "dinaz_big_logo@3x"
				} else if(address.companyName!.contains("Rietumu")) {
					imageName = "rn_big_logo@3x"
				} else if(address.companyName!.contains("Metro")) {
					imageName = "metro_big_logo@3x"
				} else if(address.companyName!.contains("Virši")) {
					imageName = "virshi_big_logo@3x"
				} else if(address.companyName!.contains("Virāža")) {
					imageName = "viraza_big_logo@3x"
				} else if(address.companyName!.contains("Intergaz")) {
					imageName = "intergaz_big_logo@3x"
				} else if(address.companyName!.contains("MC")) {
					imageName = "mc_big_logo@3x"
				} else if(address.companyName!.contains("Geksans")) {
					imageName = "geksans_big_logo@3x"
				} else if(address.companyName!.contains("Latvijas Nafta")) {
					imageName = "ln_big_logo@3x"
				} else if(address.companyName!.contains("Straujupīte")) {
					imageName = "totals_big_logo@3x"
				} else if(address.companyName!.contains("Latvijas Propāna Gāze")) {
					imageName = "lpg_big_logo@3x"
				}

				var value = companiesDict[address.companyName!] ?? Area.AreaEditPage.Response.CompanyEntry.init()
				value.stationCount = value.stationCount + 1
				value.addresses.append(address)
				value.name = address.companyName!
				value.imageName = imageName
				value.enabled = false
				companiesDict[address.companyName!] = value
			}

			for address in enabledStations as! [AddressEntity] {
				var value = companiesDict[address.companyName!] ?? Area.AreaEditPage.Response.CompanyEntry.init()
				value.enabled = true
				companiesDict[address.companyName!] = value
			}


			companyEntries.removeAll()

			for item in companiesDict.values {
				companyEntries.append(item)
			}

			companyEntries.sort(by: { $0.stationCount > $1.stationCount })




			let response = Area.AreaEditPage.Response(companyEntries: companyEntries, fetchedArea: area)
			presenter?.presentAreaEditPageWithData(response: response)

		} catch let error {
			print("areas fetch error %@", error)
		}
  	}

  	func updateName(request: Area.ChangeName.Request) {
		let task = { [weak self] in
			self?.area.name = request.newName
			DataBaseManager.shared.saveContext()
			self?.updateData()
		}

		DataBaseManager.shared.addATask(action: task)
  	}

  	func toggleCheapest(request: Area.ToggleCheapest.Request) {
		let task = { [weak self] in
			self?.area.cheapPricesOnly = request.cheapest
			DataBaseManager.shared.saveContext()
			self?.updateData()
		}

		DataBaseManager.shared.addATask(action: task)
  	}

  	func togglePushNotif(request: Area.ToggleNotif.Request) {
		let task = { [weak self] in
			self?.area.pushIsOn = request.notif
			DataBaseManager.shared.saveContext()
			self?.updateData()
		}

		DataBaseManager.shared.addATask(action: task)
  	}

	func deletePressed() {
		let task = {
			DataBaseManager.shared.mainManagedObjectContext().delete(self.area)
			DataBaseManager.shared.saveContext()
			self.popBack()
		}

		DataBaseManager.shared.addATask(action: task)
	}

  	//MARK: Functions

  	internal func updateData() {
		let response = Area.AreaEditPage.Response(companyEntries: companyEntries, fetchedArea: area)
		presenter?.presentAreaEditPageWithData(response: response)
  	}

  	internal func popBack() {
  		router?.popViewController()
  	}
}
