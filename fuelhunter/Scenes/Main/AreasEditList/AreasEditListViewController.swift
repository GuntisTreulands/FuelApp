//
//  AreasEditListViewController.swift
//  fuelhunter
//
//  Created by Guntis on 27/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FirebaseCrashlytics

protocol AreasEditListDisplayLogic: class {
  	func displayList(viewModel: Areas.AreasEditList.ViewModel)
}

class AreasEditListViewController: UIViewController, AreasEditListDisplayLogic, AreasEditListViewLayoutViewLogic {

  	var interactor: AreasEditListBusinessLogic?
  	var router: (NSObjectProtocol & AreasEditListRoutingLogic & AreasEditListDataPassing)?
  	var layoutView: AreasEditListViewLayoutView!
  	var data = [Areas.AreasEditList.ViewModel.DisplayedCell]()

  	// MARK: Object lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}

  	// MARK: View lifecycle

	deinit {
	}

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	self.title = "areas_title".localized()
    	self.view.backgroundColor = .white
    	setUpView()

		self.navigationController!.interactivePopGestureRecognizer?.delegate = nil
		self.navigationController!.interactivePopGestureRecognizer?.isEnabled = true
    	self.navigationController!.setNavigationBarHidden(false, animated: true)
    	getData()
  	}

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
	}

	// MARK: Set up

	private func setup() {
		let viewController = self
		let interactor = AreasEditListInteractor()
		let presenter = AreasEditListPresenter()
		let router = AreasEditListRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		presenter.router = router
		router.viewController = viewController
		router.dataStore = interactor
  	}

	private func setUpView() {
		layoutView = AreasEditListViewLayoutView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(layoutView)
		layoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        layoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        layoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
        layoutView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
		layoutView.controller = self
	}

	// MARK: AreasEditListViewLayoutViewLogic

	func userPressedOnANewCell() {
		router?.routeToSetUp()
	}

	func userPressedOnItem(withItemId id: Int) {
		router?.userPressedOnAreaWithId(withItemId: id)
	}

  	// MARK: Functions

  	private func getData() {
    	let request = Areas.AreasEditList.Request()
    	interactor?.getAreasData(request: request)
  	}

	// MARK: AreasEditListDisplayLogic

  	func displayList(viewModel: Areas.AreasEditList.ViewModel) {
  		layoutView.updateData(data: viewModel.displayedCells)
  	}
}
