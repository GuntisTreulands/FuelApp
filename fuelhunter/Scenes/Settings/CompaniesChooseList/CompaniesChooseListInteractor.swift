//
//  CompaniesChooseListInteractor.swift
//  fuelhunter
//
//  Created by Guntis on 04/07/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol CompaniesChooseListBusinessLogic {
  	func getCompaniesListData(request: CompaniesChooseList.CompanyCells.Request)
  	func userToggledCompanyType(request: CompaniesChooseList.SwitchToggled.Request)
}

protocol CompaniesChooseListDataStore {
  	//var name: String { get set }
}

class CompaniesChooseListInteractor: CompaniesChooseListBusinessLogic, CompaniesChooseListDataStore {
  	var presenter: CompaniesChooseListPresentationLogic?
  	var appSettingsWorker = AppSettingsWorker.shared
  	//var name: String = ""

  	// MARK: CompaniesChooseListBusinessLogic

  	func getCompaniesListData(request: CompaniesChooseList.CompanyCells.Request) {

		let context = DataBaseManager.shared.mainManagedObjectContext()

		let fetchRequest: NSFetchRequest<CompanyEntity> = CompanyEntity.fetchRequest()

		var fetchedCompanies: [CompanyEntity]?

		let sort = NSSortDescriptor(key: "order", ascending: true)
		fetchRequest.sortDescriptors = [sort]

		do {
			fetchedCompanies = try context.fetch(fetchRequest)
		} catch let error {
			// Something went wrong
			print("Something went wrong. Reseting. \(error)")
		}

		let response = CompaniesChooseList.CompanyCells.Response(fetchedCompanies: fetchedCompanies ?? [])
    	presenter?.presentData(response: response)
  	}

  	func userToggledCompanyType(request: CompaniesChooseList.SwitchToggled.Request) {

  		let context = DataBaseManager.shared.mainManagedObjectContext()

		let fetchRequest: NSFetchRequest<CompanyEntity> = CompanyEntity.fetchRequest()

		fetchRequest.predicate = NSPredicate(format: "name == %@", request.companyName)

		do {
			let fetchedCompanies = try context.fetch(fetchRequest)

			if fetchedCompanies.isEmpty {
				// Problem
			} else {
				// Now we need to toggle enable status for selected company.
				// And then check all other companies, and toggle chepest, if needed.
				let selectedCompany = fetchedCompanies.first!
				selectedCompany.isEnabled = request.state

				fetchRequest.predicate = NSPredicate(format: "isCheapestToggle == %i", true)
				let cheapestCompaniesArray = try context.fetch(fetchRequest)

				if cheapestCompaniesArray.isEmpty {
					// Problem
				} else {
					let cheapestCompany = cheapestCompaniesArray.first!

					// If cheapest is disabled, then we need to re-calculate all.
					if cheapestCompany.isEnabled == false {
						fetchRequest.predicate = NSPredicate(format: "isCheapestToggle == %i", false)
						let allExceptCheapestCompaniesArray = try context.fetch(fetchRequest)

						if allExceptCheapestCompaniesArray.isEmpty {
							// Problem
						} else {
							var isAtLeastOneEnabled = false

							for aCompany in allExceptCheapestCompaniesArray {
								if aCompany.isEnabled == true {
									isAtLeastOneEnabled = true
									break
								}
							}
							// If none was enabled, then set as true.
							if isAtLeastOneEnabled == false {
								cheapestCompany.isEnabled = true
							}
						}
					}
					// else, all is good.
				}

				DataBaseManager.shared.saveContext()
			}

		} catch let error {
			print("Something went wrong. \(error)")
		}

		let request = CompaniesChooseList.CompanyCells.Request()
    	getCompaniesListData(request: request)


//  		var companies = appSettingsWorker.getCompanyToggleStatus()
//
//  		if request.companyType == .typeCheapest { companies.typeCheapest = request.state }
//  		if request.companyType == .typeNeste { companies.typeNeste = request.state }
//  		if request.companyType == .typeCircleK { companies.typeCircleK = request.state }
//  		if request.companyType == .typeKool { companies.typeKool = request.state }
//  		if request.companyType == .typeLN { companies.typeLn = request.state }
//  		if request.companyType == .typeVirsi { companies.typeVirsi = request.state }
//  		if request.companyType == .typeGotikaAuto { companies.typeGotikaAuto = request.state }
//
//  		appSettingsWorker.setCompanyToggleStatus(allCompanies: companies)
//
//  		let request = CompaniesChooseList.CompanyCells.Request()
//    	getCompaniesListData(request: request)
  	}
}
