//
//  PushNotifSetupViewController.swift
//  fuelhunter
//
//  Created by Guntis on 10/07/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PushNotifSetupDisplayLogic: class {
  	func updateData(viewModel: PushNotifSetup.SetUp.ViewModel)
}

class PushNotifSetupViewController: UIViewController, PushNotifSetupDisplayLogic, PushNotifSetupLayoutViewLogic {
  	var interactor: PushNotifSetupBusinessLogic?
  	var router: (NSObjectProtocol & PushNotifSetupRoutingLogic & PushNotifSetupDataPassing)?
	var layoutView: PushNotifSetupLayoutView!
	
  	// MARK: Object lifecycle

  	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}

  	// MARK: Setup

  	private func setup() {
		let viewController = self
		let interactor = PushNotifSetupInteractor()
		let presenter = PushNotifSetupPresenter()
		let router = PushNotifSetupRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		presenter.router = router
		router.viewController = viewController
		router.dataStore = interactor
  	}

  	// MARK: View lifecycle

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	self.view.backgroundColor = .clear
    	setUpView()
		getData()
  	}
  	
  	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
		
		layoutView.appMovedToForeground()
		
		NotificationCenter.default.addObserver(self, selector: #selector(appMovedToForeground), name: UIApplication.willEnterForegroundNotification, object: nil)
		NotificationCenter.default.addObserver(self, selector: #selector(appMovedToBackground), name: UIApplication.didEnterBackgroundNotification, object: nil)
	}
	
	override func viewDidDisappear(_ animated: Bool) {
		super.viewDidDisappear(animated)
		let notificationCenter = NotificationCenter.default
		notificationCenter.removeObserver(self)
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		layoutView.animateBackgroundImageColorToState(visible: true)
//		UIView.animate(withDuration: 0.3, delay: 0.0, options: [], animations: {
//			self.backgroundView.backgroundColor = UIColor.init(red: 46/255.0, green: 63/255.0, blue: 97/255.0, alpha: 0.3)
//		}, completion: { (finished: Bool) in })
	}
	
	override func viewWillDisappear(_ animated: Bool) {
		super.viewWillDisappear(animated)
		layoutView.animateBackgroundImageColorToState(visible: false)
//		UIView.animate(withDuration: 0.3, delay: 0.0, options: [], animations: {
//			self.backgroundView.backgroundColor = .clear
//		}, completion: { (finished: Bool) in })
	}
  	
  	func setUpView() {
		layoutView = PushNotifSetupLayoutView.init(frame: CGRect.init(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(layoutView)
		layoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        layoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        layoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
        layoutView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
		layoutView.controller = self
	}

  	// MARK: Functions

	@objc func appMovedToForeground() {
		layoutView.appMovedToForeground()
	}
	
	@objc func appMovedToBackground() {
		layoutView.appMovedToBackground()
	}
	
	// MARK: PushNotifSetupLayoutView
	
	func activateButtonPressed() {
  		interactor?.activateButtonPressed()
  	}
  	
  	func cancelButtonPressed() {
  		interactor?.cancelButtonPressed()
  	}
  	
  	func stepperPressed(value: Int) {
  		interactor?.stepperValueChangedTo(value: value)
  	}
  	
  	func getData() {
    	let request = PushNotifSetup.SetUp.Request()
    	interactor?.getDataToShow(request: request)
  	}

  	func updateData(viewModel: PushNotifSetup.SetUp.ViewModel) {
  		layoutView.descriptionLabel.text = viewModel.displayedItem.description
  		layoutView.stepper.minimumValue = Double(viewModel.displayedItem.minValue)
  		layoutView.stepper.maximumValue = Double(viewModel.displayedItem.maxValue)
  		layoutView.stepper.value = Double(viewModel.displayedItem.value)
  	}
}
