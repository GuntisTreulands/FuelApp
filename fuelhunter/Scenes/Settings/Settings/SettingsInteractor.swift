//
//  SettingsInteractor.swift
//  fuelhunter
//
//  Created by Guntis on 27/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsBusinessLogic {
  	func getSettingsCellsData(request: Settings.SettingsList.Request)
  	func userPressedOnNotifSwitch()
  	func userPressedOnGpsSwitch()
}

protocol SettingsDataStore {
  	//var name: String { get set }
}

class SettingsInteractor: SettingsBusinessLogic, SettingsDataStore {
  	var presenter: SettingsPresentationLogic?
  	var worker = SettingsWorker()
  	var appSettingsWorker = AppSettingsWorker()

	// MARK: SettingsBusinessLogic

  	func getSettingsCellsData(request: Settings.SettingsList.Request) {
		let gpsIsEnabledStatus = appSettingsWorker.getGPSIsEnabled()
		let notifIsEnabledStatus = appSettingsWorker.getNotifIsEnabled()
		let notifCentsValue = appSettingsWorker.getStoredNotifCentsCount()
		let companyNames = appSettingsWorker.getCompanyToggleStatus().description
		let fuelTypeNames = appSettingsWorker.getFuelTypeToggleStatus().description
		let response = Settings.SettingsList.Response.init(companyNames: companyNames, fuelTypeNames: fuelTypeNames, gpsIsEnabledStatus: gpsIsEnabledStatus, pushNotifIsEnabledStatus: notifIsEnabledStatus, notifCentsValue: notifCentsValue)
		presenter?.presentSettingsListWithData(response: response)
  	}

  	func userPressedOnNotifSwitch() {
  		appSettingsWorker.notifSwitchWasPressed { result in
  			switch result {
  				case .success(let data):
  					// All good. UI was probably up to date.
					print(data)
				case .needsSetUp:
					let storedCentsCount = self.appSettingsWorker.getStoredNotifCentsCount()
					let response = Settings.PushNotif.Response.init(storedNotifCentsCount: storedCentsCount)
					self.presenter?.showNotifSetUp(response: response)
  				case .failure(let error):
  					// Error. Update UI. Show error.
  					let request = Settings.SettingsList.Request()
  					self.getSettingsCellsData(request: request)
  					print(error)
  			}
		}
  	}

  	// MARK: TODO.
  	func userPressedOnGpsSwitch() {
  		appSettingsWorker.gpsSwitchWasPressed { result in
  			switch result {
  				case .success(let data):
  					// All good. UI was probably up to date.
					print(data)
				case .needsSetUp:
					// Ask for permission?
					break
  				case .failure(let error):
  					// Error. Update UI. Show error.
  					let request = Settings.SettingsList.Request()
  					self.getSettingsCellsData(request: request)
  					print(error)
  			}
		}
  	}
}
