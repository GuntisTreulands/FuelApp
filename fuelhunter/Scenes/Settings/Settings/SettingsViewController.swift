//
//  SettingsViewController.swift
//  fuelhunter
//
//  Created by Guntis on 27/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsDisplayLogic: class {
  	func displaySettingsList(viewModel: Settings.SettingsList.ViewModel)
}

class SettingsViewController: UIViewController, SettingsDisplayLogic, UITableViewDelegate, UITableViewDataSource, SettingsCellSwitchLogic, PushNotifReturnUpdateDataLogic {
  	var interactor: SettingsBusinessLogic?
  	var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?
  	var data = [Settings.SettingsList.ViewModel.DisplayedSettingsCell]()
  	var activateShadowUpdates = false
  	
	@IBOutlet weak var tableView: UITableView!
	@IBOutlet weak var navBarBottomShadow: UIImageView!
	@IBOutlet weak var tableViewBottomShadow: UIImageView!
	
  	// MARK: Object lifecycle

  	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}
	
  	// MARK: Setup

  	private func setup() {
		let viewController = self
		let interactor = SettingsInteractor()
		let presenter = SettingsPresenter()
		let router = SettingsRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		presenter.router = router
		router.viewController = viewController
		router.dataStore = interactor
  	}

  	// MARK: View lifecycle

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	self.title = "IestatÄ«jumi"
    	
    	self.view.backgroundColor = .white
		tableView.delegate = self
    	tableView.dataSource = self
		tableView.separatorStyle = .none
    	tableView.contentInset = UIEdgeInsets.init(top: 22, left: 0, bottom: 10, right: 0)
    	let nib = UINib.init(nibName: "SettingsListCell", bundle: nil)
    	tableView.register(nib, forCellReuseIdentifier: "cell")
  	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
		getSettingsCellsData()
	}
	
	
	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
		activateShadowUpdates = true
	}
		
	// MARK: Table view
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return data.count
	}

	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

		if let cell = tableView.dequeueReusableCell(
		   withIdentifier: "cell",
		   for: indexPath
		) as? SettingsListCell {
		
			let aData = self.data[indexPath.row]
			cell.selectionStyle = .none
			cell.controller = self
			cell.titleLabel.text = aData.title
			cell.descriptionLabel.text = aData.description
			cell.aSwitch.isOn = aData.toggleStatus
			cell.setSwitch(asVisible: aData.shouldShowToggle)
			if self.data.count == 1 {
				cell.setAsCellType(cellType: .single)
			} else {
				if self.data.first == aData {
					cell.setAsCellType(cellType: .top)
				} else if self.data.last == aData {
					cell.setAsCellType(cellType: .bottom)
				} else {
					cell.setAsCellType(cellType: .middle)
				}
			}
			return cell
		} else {
			// Problem
			return UITableViewCell.init()
		}
	}
	
	func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
		return 0
	}

	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		
		let aData = self.data[indexPath.row]
		
		switch aData.settingsListCellType {
			case .fuelCompanyCell: 
				router?.routeToCompanyChooseScene()
			case .fuelTypeCell:
				router?.routeToFuelTypeScene()
			case .appLanguageCell:
				router?.routeToLanguageChooseScene()
			case .aboutAppCell:
				router?.routeToAboutScene()
			default:
				break
		}
	}

	func scrollViewDidScroll(_ scrollView: UIScrollView) {
		if activateShadowUpdates == true {
			adjustVisibilityOfShadowLines()
		}
	}
	
	func adjustVisibilityOfShadowLines() {
		let alfa = min(50, max(0, tableView.contentOffset.y+20))/50.0
		
		navBarBottomShadow.alpha = alfa
		
		let value = tableView.contentOffset.y+tableView.frame.size.height-tableView.contentInset.bottom-tableView.contentInset.top

		let alfa2 = min(50, max(0, tableView.contentSize.height-value-22))/50.0
		
		tableViewBottomShadow.alpha = alfa2
	}
	
	// MARK: SettingsCellSwitchLogic 
	func switchWasPressedOnTableViewCell(cell: SettingsListCell) {
		let indexPath = tableView.indexPath(for: cell)
		let aData = self.data[indexPath!.row]
		
		if aData.settingsListCellType == .gpsCell {
			interactor?.userPressedOnGpsSwitch()
		}
		else if aData.settingsListCellType == .pushNotifCell {
			interactor?.userPressedOnNotifSwitch()
		}
	}
  	// MARK: Do something
  	
	
  	func getSettingsCellsData() {
    	let request = Settings.SettingsList.Request()
    	interactor?.getSettingsCellsData(request: request)
  	}

  	func displaySettingsList(viewModel: Settings.SettingsList.ViewModel) {
  		data = viewModel.displayedSettingsCells
    	tableView.reloadData()
		tableView.layoutIfNeeded()
		adjustVisibilityOfShadowLines()
  	}
  	
  	// MARK: PushNotifReturnUpdateDataLogic
	func updateData() {
		getSettingsCellsData()
	}
}
