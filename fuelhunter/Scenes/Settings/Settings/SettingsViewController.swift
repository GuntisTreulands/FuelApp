//
//  SettingsViewController.swift
//  fuelhunter
//
//  Created by Guntis on 27/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsDisplayLogic: class {
  	func displaySettingsList(viewModel: Settings.SettingsList.ViewModel)
}

class SettingsViewController: UIViewController, SettingsDisplayLogic, PushNotifReturnUpdateDataLogic, SettingsViewLayoutViewLogic {

  	var interactor: SettingsBusinessLogic?
  	var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?
  	var layoutView: SettingsViewLayoutView!
  	var data = [Settings.SettingsList.ViewModel.DisplayedSettingsCell]()

  	// MARK: Object lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}

  	// MARK: View lifecycle

	deinit {
    	NotificationCenter.default.removeObserver(self, name: .applicationDidBecomeActiveFromAppSettings, object: nil)
	}

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	self.title = "IestatÄ«jumi"
    	self.view.backgroundColor = .white
    	setUpView()

    	NotificationCenter.default.addObserver(self, selector: #selector(applicationDidBecomeActive),
    		name: .applicationDidBecomeActiveFromAppSettings, object: nil)
  	}

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		getSettingsCellsData()
	}

	// MARK: Set up

	private func setup() {
		let viewController = self
		let interactor = SettingsInteractor()
		let presenter = SettingsPresenter()
		let router = SettingsRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		presenter.router = router
		router.viewController = viewController
		router.dataStore = interactor
  	}

	func setUpView() {
		layoutView = SettingsViewLayoutView.init(frame: CGRect.init(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(layoutView)
		layoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        layoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        layoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
        layoutView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
		layoutView.controller = self
	}

	// MARK: ExtendedSettingsCellSwitchLogic

	func userPressedOnCellType(cellType: Settings.SettingsListCellType) {
		switch cellType {
			case .fuelCompanyCell: 
				router?.routeToCompanyChooseScene()
			case .fuelTypeCell:
				router?.routeToFuelTypeScene()
			case .appLanguageCell:
				router?.routeToLanguageChooseScene()
			case .aboutAppCell:
				router?.routeToAboutScene()
			case .gpsCell:
				interactor?.userPressedOnGpsSwitch()
			case .pushNotifCell:
				interactor?.userPressedOnNotifSwitch()
		}
	}

  	// MARK: Functions

  	func getSettingsCellsData() {
    	let request = Settings.SettingsList.Request()
    	interactor?.getSettingsCellsData(request: request)
  	}

  	func displaySettingsList(viewModel: Settings.SettingsList.ViewModel) {
  		layoutView.updateData(data: viewModel.displayedSettingsCells)
  	}

  	@objc func applicationDidBecomeActive() {
		getSettingsCellsData()
	}


  	// MARK: PushNotifReturnUpdateDataLogic

	func updateData() {
		getSettingsCellsData()
	}
}
