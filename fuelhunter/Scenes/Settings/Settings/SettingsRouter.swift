//
//  SettingsRouter.swift
//  fuelhunter
//
//  Created by Guntis on 27/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MessageUI
import CoreData
import FirebaseCrashlytics
import CoreLocation

protocol SettingsRoutingLogic {
  	func routeToCompanyChooseScene()
  	func routeToFuelTypeScene()
  	func routeToLanguageChooseScene()
  	func routeToAboutScene()
  	func presentNotifSetUpScene(response: Settings.PushNotif.Response)
  	func presentMailForm()
}

protocol SettingsDataPassing {
  	var dataStore: SettingsDataStore? { get }
}

class SettingsRouter: NSObject, SettingsRoutingLogic, SettingsDataPassing, MFMailComposeViewControllerDelegate {
  	weak var viewController: SettingsViewController?
  	var dataStore: SettingsDataStore?

	// MARK: SettingsRoutingLogic

	func routeToCompanyChooseScene() {
  		navigateToScene(source: viewController!, destination: CompaniesChooseListViewController())
  	}

  	func routeToFuelTypeScene() {
  		navigateToScene(source: viewController!, destination: FuelTypeChooseListViewController())
  	}

  	func routeToLanguageChooseScene() {
  		navigateToScene(source: viewController!, destination: AppLanguageViewController())
  	}

  	func routeToAboutScene() {
  		navigateToScene(source: viewController!, destination: AboutAppViewController())
  	}

  	func presentNotifSetUpScene(response: Settings.PushNotif.Response) {
  		let destinationVC = PushNotifSetupViewController()
  		destinationVC.router?.previousViewController = viewController!
  		destinationVC.providesPresentationContextTransitionStyle = true
		destinationVC.definesPresentationContext = true
		destinationVC.modalPresentationStyle=UIModalPresentationStyle.overCurrentContext
		viewController!.present(destinationVC, animated: true) { }
  	}

	func presentMailForm() {
		if MFMailComposeViewController.canSendMail() {
			let mail = MFMailComposeViewController()

			if let lastDownloadTimestamp = UserDefaults.standard.data(forKey: "lastDownloadedPricesData") {
				mail.addAttachmentData(lastDownloadTimestamp, mimeType: "application/json", fileName: "lastDownloadedPricesData")
			}

			let companyFetchRequest: NSFetchRequest<CompanyEntity> = CompanyEntity.fetchRequest()
			companyFetchRequest.predicate = NSPredicate(format: "isEnabled == YES")
			var enabledCompaniesArray: [String] = []

			do {
				let existingCompanyList = try DataBaseManager.shared.mainManagedObjectContext().fetch(companyFetchRequest)

				if !existingCompanyList.isEmpty {
					for company in existingCompanyList {
						enabledCompaniesArray.append("\(company.name ?? "Unnamed company")")
					}
				}

			} catch let error {
				print("error \(error)")
				Crashlytics.crashlytics().record(error: error)
			}

			var locationString = ""

			if !AppSettingsWorker.shared.getGPSIsEnabled() {
				locationString = "settings_feedback_location_is_disabled".localized()
			} else if let previousLocationEncoded = UserDefaults.standard.object(forKey: "savedLocation") as? Data {
				let previousLocationDecoded = NSKeyedUnarchiver.unarchiveObject(with: previousLocationEncoded) as! CLLocation
				locationString = "\("settings_feedback_location".localized()): \(previousLocationDecoded.coordinate.latitude), \(previousLocationDecoded.coordinate.longitude)"

			}


			mail.mailComposeDelegate = self
			mail.setToRecipients(["fuelhunterlatvia@gmail.com"])
			mail.setSubject("settings_feedback_email_title".localized())
			mail.setMessageBody("""
				\("settings_feedback_email_info".localized()).
				<br><br><br><br><br><br><br><br><br>\(UIDevice.deviceDescription)
				<br><br>\("settings_feedback_enabled_companies".localized()): \(enabledCompaniesArray)
				<br> \(locationString)
				""", isHTML: true)

			
			viewController!.present(mail, animated: true) { }
		} else {
			let alert = UIAlertController(title: "settings_error_email_title".localized(), message: "settings_error_email_description".localized(), preferredStyle: .alert)
			alert.addAction(UIAlertAction(title: "ok_button_title".localized(), style: .cancel, handler: nil))
			viewController!.present(alert, animated: true)
		}
	}

	// MARK: MFMailComposeViewControllerDelegate

	func mailComposeController(_ controller: MFMailComposeViewController, didFinishWith result: MFMailComposeResult, error: Error?) {
		controller.dismiss(animated: true)
	}

	// MARK: Functions

	private func navigateToScene(source: UIViewController, destination: UIViewController) {
		source.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
		source.show(destination, sender: nil)
  	}
}
