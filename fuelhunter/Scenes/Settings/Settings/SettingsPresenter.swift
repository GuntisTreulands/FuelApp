//
//  SettingsPresenter.swift
//  fuelhunter
//
//  Created by Guntis on 27/06/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsPresentationLogic {
  	func presentSettingsListWithData(response: Settings.SettingsList.Response)
  	func showNotifSetUp(response: Settings.PushNotif.Response)
}

class SettingsPresenter: SettingsPresentationLogic {
  	weak var viewController: SettingsDisplayLogic?
	weak var router: SettingsRouter?

  	// MARK: SettingsPresentationLogic
  	
	func showNotifSetUp(response: Settings.PushNotif.Response) {
		router?.presentNotifSetUpScene(response: response)
	} 

  	func presentSettingsListWithData(response: Settings.SettingsList.Response) {

  		let companyNames = response.companyNames
		let fuelTypeNames = response.fuelTypeNames
		let gpsIsEnabledStatus = response.gpsIsEnabledStatus
		let pushNotifIsEnabledStatus = response.pushNotifIsEnabledStatus
		var descriptionString = "settings_receive_notif_if_price_drops_by_title".localized()

  		if response.notifCentsValue == 1 {
  			descriptionString.append(" \(response.notifCentsValue) \("settings_1_cent".localized())")
  		} else {
  			descriptionString.append(" \(response.notifCentsValue) \("settings_more_cents".localized())")
  		}


		let settingsItem1 = Settings.SettingsList.ViewModel.DisplayedSettingsCell(settingsListCellType: .fuelCompanyCell, title: companyNames, description: "settings_fuel_company_description", shouldShowToggle: false, shouldShowAccessory: true, toggleStatus: false)

		let settingsItem2 = Settings.SettingsList.ViewModel.DisplayedSettingsCell(settingsListCellType: .fuelTypeCell, title: fuelTypeNames, description: "settings_fuel_type_description", shouldShowToggle: false, shouldShowAccessory: true, toggleStatus: false)

		let settingsItem3 = Settings.SettingsList.ViewModel.DisplayedSettingsCell(settingsListCellType: .gpsCell, title: "settings_gps_title", description: "settings_gps_description", shouldShowToggle: true, shouldShowAccessory: false, toggleStatus: gpsIsEnabledStatus)

		let settingsItem4 = Settings.SettingsList.ViewModel.DisplayedSettingsCell(settingsListCellType: .pushNotifCell, title: "settings_notif_title", description: descriptionString, shouldShowToggle: true, shouldShowAccessory: false, toggleStatus: pushNotifIsEnabledStatus)

		let settingsItem5 = Settings.SettingsList.ViewModel.DisplayedSettingsCell(settingsListCellType: .appLanguageCell, title: "settings_app_language_title", description: "settings_app_language_description", shouldShowToggle: false, shouldShowAccessory: true, toggleStatus: false)

		let settingsItem6 = Settings.SettingsList.ViewModel.DisplayedSettingsCell(settingsListCellType: .aboutAppCell, title: "settings_about_app_title", description: "settings_about_app_description", shouldShowToggle: false, shouldShowAccessory: true, toggleStatus: false)


		var array = [settingsItem1, settingsItem2]

		// Only if gps is disabled. This will serve as a "link" to settings, to enable it.
//		if gpsIsEnabledStatus == false {
			array.append(settingsItem3)
//		}

		array.append(settingsItem4)
		array.append(settingsItem5)
		array.append(settingsItem6)


    	let viewModel = Settings.SettingsList.ViewModel(displayedSettingsCells: array)
    	viewController?.displaySettingsList(viewModel: viewModel)
  	}
}
