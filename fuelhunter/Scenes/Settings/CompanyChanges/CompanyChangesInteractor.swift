//
//  CompanyChangesInteractor.swift
//  fuelhunter
//
//  Created by Guntis on 10/07/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol CompanyChangesBusinessLogic {
	func getDataToShow(request: CompanyChanges.List.Request)
  	func userToggledCompanyType(request: CompanyChanges.SwitchToggled.Request)
    func dismissButtonPressed()
}

protocol CompanyChangesDataStore {

}

class CompanyChangesInteractor: CompanyChangesBusinessLogic, CompanyChangesDataStore {
  	var presenter: CompanyChangesPresentationLogic?
	var addedCompanies = [CompanyEntity]()
	var removedCompanies = [CompanyEntity]()

	var companiesThatWereEnabled = [String]()

	// MARK: CompanyChangesBusinessLogic

	func getDataToShow(request: CompanyChanges.List.Request) {

		let sort = NSSortDescriptor(key: "order", ascending: true)

		let addedCompanyRequest: NSFetchRequest<CompanyEntity> = CompanyEntity.fetchRequest()
		addedCompanyRequest.predicate = NSPredicate(format: "isCheapestToggle == %i && shouldPopUpToUser == %i && isHidden == %i", false, true, false)
		addedCompanyRequest.sortDescriptors = [sort]
//		removedCompanyRequest.predicate = NSPredicate(format: "isHidden == %i", false)
		if let companyObjectArray = try? DataBaseManager.shared.mainManagedObjectContext().fetch(addedCompanyRequest) {
			addedCompanies.append(contentsOf: companyObjectArray)
		}

		let removedCompanyRequest: NSFetchRequest<CompanyEntity> = CompanyEntity.fetchRequest()
		removedCompanyRequest.predicate = NSPredicate(format: "isCheapestToggle == %i && shouldPopUpToUser == %i && isHidden == %i", false, true, true)
		removedCompanyRequest.sortDescriptors = [sort]
//		removedCompanyRequest.predicate = NSPredicate(format: "isHidden == %i", false)
		if let companyObjectArray = try? DataBaseManager.shared.mainManagedObjectContext().fetch(removedCompanyRequest) {
			removedCompanies.append(contentsOf: companyObjectArray)
		}

		presenter?.presentData(response: CompanyChanges.List.Response(fetchedAddedCompanies: addedCompanies, fetchedRemovedCompanies: removedCompanies))
  	}

	func userToggledCompanyType(request: CompanyChanges.SwitchToggled.Request) {

		let status = {
			let context = DataBaseManager.shared.mainManagedObjectContext()

			let fetchRequest: NSFetchRequest<CompanyEntity> = CompanyEntity.fetchRequest()

			fetchRequest.predicate = NSPredicate(format: "isHidden == \(false) && name == %@", request.companyName)
			fetchRequest.propertiesToFetch = ["isEnabled"]

			do {
				let fetchedCompanies = try context.fetch(fetchRequest)

				if fetchedCompanies.isEmpty {
					// Problem
				} else {
					// Now we need to toggle enable status for selected company.
					// And then check all other companies, and toggle chepest, if needed.
					let selectedCompany = fetchedCompanies.first!
					selectedCompany.isEnabled = request.state

					if selectedCompany.isEnabled == true {
						self.companiesThatWereEnabled.append(selectedCompany.name!)
					} else {
						self.companiesThatWereEnabled.removeAll(where: {$0 == selectedCompany.name})
					}

					fetchRequest.predicate = NSPredicate(format: "isCheapestToggle == \(true)")
					fetchRequest.propertiesToFetch = ["isEnabled"]
					let cheapestCompaniesArray = try context.fetch(fetchRequest)


					if cheapestCompaniesArray.isEmpty {
						// Problem
					} else {
						let cheapestCompany = cheapestCompaniesArray.first!

						// If cheapest is disabled, then we need to re-calculate all.
						if cheapestCompany.isEnabled == false {
							fetchRequest.predicate = NSPredicate(format: "isHidden == \(false) && isCheapestToggle == \(false)")
							fetchRequest.propertiesToFetch = ["isEnabled"]
							let allExceptCheapestCompaniesArray = try context.fetch(fetchRequest)

							if allExceptCheapestCompaniesArray.isEmpty {
								// Problem
							} else {
								var isAtLeastOneEnabled = false

								for aCompany in allExceptCheapestCompaniesArray {
									if aCompany.isEnabled == true {
										isAtLeastOneEnabled = true
										break
									}
								}
								// If none was enabled, then set as true.
								if isAtLeastOneEnabled == false {
									cheapestCompany.isEnabled = true
									self.companiesThatWereEnabled.append(cheapestCompany.name!)
								}
							}
						}
						// else, all is good.
					}

					DataBaseManager.shared.saveContext()
				}

			} catch let error {
				print("Something went wrong. \(error) Sentry Report!")
			}
		}

		DataBaseManager.shared.addATask(action: status)
  	}

  	func dismissButtonPressed() {

		// In case we enabled a new company, we need to re-download prices.
		if companiesThatWereEnabled.isEmpty == false {
			PricesDownloader.removeAllPricesAndCallDownloader()
		}

  		let task = {
			for company in self.addedCompanies {
				company.shouldPopUpToUser = false
			}

			for company in self.removedCompanies {
				company.shouldPopUpToUser = false
			}

			DataBaseManager.shared.saveContext()
		}

		DataBaseManager.shared.addATask(action: task)

  		presenter?.returnBackToPreviousViewController()
  	}
}
