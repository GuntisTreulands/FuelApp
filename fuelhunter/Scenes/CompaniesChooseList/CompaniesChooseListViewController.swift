//
//  CompaniesChooseListViewController.swift
//  fuelhunter
//
//  Created by Guntis on 04/07/2019.
//  Copyright (c) 2019 myEmerg. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CompaniesChooseListDisplayLogic: class {
  	func displaySomething(viewModel: CompaniesChooseList.Something.ViewModel)
}

class CompaniesChooseListViewController: UIViewController, CompaniesChooseListDisplayLogic, UITableViewDelegate, UITableViewDataSource {
  	var interactor: CompaniesChooseListBusinessLogic?
  	var router: (NSObjectProtocol & CompaniesChooseListRoutingLogic & CompaniesChooseListDataPassing)?

	@IBOutlet weak var tableView: UITableView!
	@IBOutlet weak var navBarBottomShadow: UIImageView!
	
	// MARK: Object lifecycle

  	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}

  	// MARK: Setup

  	private func setup() {
		let viewController = self
		let interactor = CompaniesChooseListInteractor()
		let presenter = CompaniesChooseListPresenter()
		let router = CompaniesChooseListRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
  	}

  	// MARK: Routing

  	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    	if let scene = segue.identifier {
      		let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      		if let router = router, router.responds(to: selector) {
        		router.perform(selector, with: segue)
      		}
		}
  	}

  	// MARK: View lifecycle

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	
		self.title = "Uzpildes kompānijas"
    	
    	
    	self.view.backgroundColor = .white
		tableView.delegate = self
    	tableView.dataSource = self
    	tableView.separatorColor = .clear
    	tableView.contentInset = UIEdgeInsets.init(top: 22, left: 0, bottom: 0, right: 0)
    	let nib = UINib.init(nibName: "SettingsListCell", bundle: nil)
    	tableView.register(nib, forCellReuseIdentifier: "cell")
    	
    	
    	doSomething()
  	}
  	
  	// MARK: Table view
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return 20//data.count
	}

	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

		if let cell = tableView.dequeueReusableCell(
		   withIdentifier: "cell",
		   for: indexPath
		) as? SettingsListCell {
		
//			let aData = self.data[indexPath.row]
//			cell.selectionStyle = .none
			cell.titleLabel.text = "NESTE"
//			cell.descriptionLabel.text = aData.description
//			cell.aSwitch.isOn = aData.toggleStatus
//			
//			cell.aSwitch.isHidden = true
//			cell.accessoryIconImageView.isHidden = true
			
//			if aData.shouldShowToggle {
//				cell.aSwitch.isHidden = false
//			} else {
//				cell.accessoryIconImageView.isHidden = false
//			}
			
//			if self.data.count == 1 {
//				cell.setAsCellType(cellType: .single)
//			} else {
//				if self.data.first == aData {
//					cell.setAsCellType(cellType: .top)
//				} else if self.data.last == aData {
//					cell.setAsCellType(cellType: .bottom)
//				} else {
//					cell.setAsCellType(cellType: .middle)
//				}
//			}
			return cell
		} else {
			// Problem
			return UITableViewCell.init()
		}
	}
	
	func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
	
		return 0
	}


	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		
		
	}
	
  	func scrollViewDidScroll(_ scrollView: UIScrollView) {

		let alfa = min(100, max(0, scrollView.contentOffset.y+25))/100.0
		
		navBarBottomShadow.alpha = alfa
	}

  	// MARK: Do something

  	//@IBOutlet weak var nameTextField: UITextField!

  	func doSomething() {
    	let request = CompaniesChooseList.Something.Request()
    	interactor?.doSomething(request: request)
  	}

  	func displaySomething(viewModel: CompaniesChooseList.Something.ViewModel) {
    	//nameTextField.text = viewModel.name
  	}
}
