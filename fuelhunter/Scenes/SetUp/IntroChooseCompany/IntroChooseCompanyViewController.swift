//
//  IntroChooseCompanyViewController.swift
//  fuelhunter
//
//  Created by Guntis on 19/07/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol IntroChooseCompanyDisplayLogic: class {
  	func displayListWithData(viewModel: IntroChooseCompany.CompanyCells.ViewModel)
}

class IntroChooseCompanyViewController: UIViewController, IntroChooseCompanyDisplayLogic, IntroChooseCompanyLayoutViewLogic, FuelCompanyListCellSwitchLogic {
	
  	var interactor: IntroChooseCompanyBusinessLogic?
  	var router: (NSObjectProtocol & IntroChooseCompanyRoutingLogic & IntroChooseCompanyDataPassing)?
	var layoutView: IntroChooseCompanyLayoutView!
  	// MARK: Object lifecycle

  	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}

  	// MARK: Setup

  	private func setup() {
		let viewController = self
		let interactor = IntroChooseCompanyInteractor()
		let presenter = IntroChooseCompanyPresenter()
		let router = IntroChooseCompanyRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
  	}

  	// MARK: View lifecycle

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	self.view.backgroundColor = .white
    	setUpView()
    	getData()
  	}

  	
  	func setUpView() {
		layoutView = IntroChooseCompanyLayoutView.init(frame: CGRect.init(x: 0, y: 0, width: self.view.frame.width, height: 100))
		self.view.addSubview(layoutView)
		layoutView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor).isActive = true
        layoutView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor).isActive = true
        layoutView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor).isActive = true
        layoutView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
		layoutView.controller = self
	}
	
  	// MARK: Functions
  	
  	func getData() {
    	let request = IntroChooseCompany.CompanyCells.Request()
    	interactor?.getCompaniesListData(request: request)
  	}

  	func displayListWithData(viewModel: IntroChooseCompany.CompanyCells.ViewModel) {
  		if (layoutView?.data.count)! == 0 {
			layoutView?.data = viewModel.displayedCompanyCellItems
			layoutView?.tableView.reloadData()
		} else {
			layoutView?.data = viewModel.displayedCompanyCellItems
			
			if (layoutView?.data.count)! > 0 {
				guard let cell = layoutView?.tableView.cellForRow(at: IndexPath.init(row: 0, section: 0)) as? FuelCompanyListCell else { return } 
				if layoutView?.data.first?.toggleStatus != cell.aSwitch.isOn {
					// Without this - table view jumps.
					UIView.setAnimationsEnabled(false)
					self.layoutView?.tableView.reloadRows(at: [IndexPath.init(row: 0, section: 0)], with: .fade)
					UIView.setAnimationsEnabled(true)
				}
			}
		}
  	}
  	
  	// MARK: IntroChooseCompanyLayoutViewLogic
  	func nextButtonWasPressed() {
  		ScenesManager.shared.advanceAppSceneState()
  	}
  	
  	// MARK: FuelCompanyListCellSwitchLogic
  	func switchWasPressedOnTableViewCell(cell: FuelCompanyListCell, withState state: Bool) {
		let indexPath = layoutView.tableView.indexPath(for: cell)
		let aData = layoutView.data[indexPath!.row] as IntroChooseCompany.CompanyCells.ViewModel.DisplayedCompanyCellItem
		
		let request = IntroChooseCompany.SwitchToggled.Request.init(companyType: aData.companyType, state: state)
		interactor?.userToggledCompanyType(request: request)
	}
}
