//
//  PushNotifSetupViewController.swift
//  fuelhunter
//
//  Created by Guntis on 10/07/2019.
//  Copyright (c) 2019 . All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PushNotifSetupDisplayLogic: class {
  	func updateData(viewModel: PushNotifSetup.SetUp.ViewModel)
}

class PushNotifSetupViewController: UIViewController, PushNotifSetupDisplayLogic {
  	var interactor: PushNotifSetupBusinessLogic?
  	var router: (NSObjectProtocol & PushNotifSetupRoutingLogic & PushNotifSetupDataPassing)?

	@IBOutlet weak var backgroundView: UIView!
	@IBOutlet weak var baseView: UIView!
	@IBOutlet weak var notifAnimationView: NotifPhoneAnimationView!
	@IBOutlet weak var titleLabel: UILabel!
	@IBOutlet weak var descriptionLabel: UILabel!
	@IBOutlet weak var stepper: UIStepper!
	@IBOutlet weak var activateButton: UIButton!
	@IBOutlet weak var cancelButton: UIButton!
	
  	// MARK: Object lifecycle

  	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    	super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    	setup()
  	}

  	required init?(coder aDecoder: NSCoder) {
    	super.init(coder: aDecoder)
    	setup()
  	}

  	// MARK: Setup

  	private func setup() {
		let viewController = self
		let interactor = PushNotifSetupInteractor()
		let presenter = PushNotifSetupPresenter()
		let router = PushNotifSetupRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		presenter.router = router
		router.viewController = viewController
		router.dataStore = interactor
  	}

  	// MARK: View lifecycle

  	override func viewDidLoad() {
    	super.viewDidLoad()
    	self.view.backgroundColor = .clear
    	doViewSetUp()
		getData()
  	}
  	
  	override func viewDidAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
		
  		notifAnimationView.startAnimating()
		
		NotificationCenter.default.addObserver(self, selector: #selector(appMovedToForeground), name: UIApplication.willEnterForegroundNotification, object: nil)
		NotificationCenter.default.addObserver(self, selector: #selector(appMovedToBackground), name: UIApplication.didEnterBackgroundNotification, object: nil)
	}
	
	override func viewDidDisappear(_ animated: Bool) {
		super.viewDidDisappear(animated)
		let notificationCenter = NotificationCenter.default
		notificationCenter.removeObserver(self)
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
		UIView.animate(withDuration: 0.3, delay: 0.0, options: [], animations: {
			self.backgroundView.backgroundColor = UIColor.init(red: 46/255.0, green: 63/255.0, blue: 97/255.0, alpha: 0.3)
		}, completion: { (finished: Bool) in })
	}
	
	override func viewWillDisappear(_ animated: Bool) {
		super.viewWillDisappear(animated)
		
		UIView.animate(withDuration: 0.3, delay: 0.0, options: [], animations: {
			self.backgroundView.backgroundColor = .clear
		}, completion: { (finished: Bool) in })
	}
  	
  	func doViewSetUp() {
  		backgroundView.translatesAutoresizingMaskIntoConstraints = false
  		baseView.translatesAutoresizingMaskIntoConstraints = false
  		notifAnimationView.translatesAutoresizingMaskIntoConstraints = false
  		titleLabel.translatesAutoresizingMaskIntoConstraints = false
  		descriptionLabel.translatesAutoresizingMaskIntoConstraints = false
  		stepper.translatesAutoresizingMaskIntoConstraints = false
  		activateButton.translatesAutoresizingMaskIntoConstraints = false
  		cancelButton.translatesAutoresizingMaskIntoConstraints = false
  		
  		backgroundView.widthAnchor.constraint(equalTo: self.view.widthAnchor).isActive = true
  		backgroundView.heightAnchor.constraint(equalTo: self.view.heightAnchor, multiplier: 2).isActive = true
  		backgroundView.topAnchor.constraint(equalTo: self.view.topAnchor, constant: -self.view.frame.size.height).isActive = true
  		
  		notifAnimationView.topAnchor.constraint(equalTo: baseView.topAnchor, constant: 20).isActive = true
  		notifAnimationView.leftAnchor.constraint(equalTo: baseView.leftAnchor, constant: 20).isActive = true
  		notifAnimationView.rightAnchor.constraint(equalTo: baseView.rightAnchor, constant: -20).isActive = true
  		
  		titleLabel.topAnchor.constraint(equalTo: notifAnimationView.bottomAnchor, constant: 10).isActive = true
  		titleLabel.leftAnchor.constraint(equalTo: baseView.leftAnchor, constant: 30).isActive = true
  		titleLabel.rightAnchor.constraint(equalTo: baseView.rightAnchor, constant: -30).isActive = true
  		
  		descriptionLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 30).isActive = true
  		descriptionLabel.leftAnchor.constraint(equalTo: baseView.leftAnchor, constant: 30).isActive = true
  		descriptionLabel.rightAnchor.constraint(equalTo: baseView.rightAnchor, constant: -30).isActive = true
  		
  		stepper.topAnchor.constraint(equalTo: descriptionLabel.bottomAnchor, constant: 30).isActive = true
  		stepper.centerXAnchor.constraint(equalTo: baseView.centerXAnchor).isActive = true
  		
  		
  		activateButton.topAnchor.constraint(equalTo: stepper.bottomAnchor, constant: 30).isActive = true
  		activateButton.leftAnchor.constraint(equalTo: baseView.leftAnchor, constant: 40).isActive = true
  		
  		cancelButton.topAnchor.constraint(equalTo: stepper.bottomAnchor, constant: 30).isActive = true
  		cancelButton.rightAnchor.constraint(equalTo: baseView.rightAnchor, constant: -40).isActive = true
  		cancelButton.bottomAnchor.constraint(equalTo: baseView.bottomAnchor, constant: -20).isActive = true


  		baseView.centerYAnchor.constraint(equalTo: self.view.centerYAnchor, constant: -50).isActive = true
  		baseView.leftAnchor.constraint(equalTo: self.view.leftAnchor, constant: 20).isActive = true
  		baseView.rightAnchor.constraint(equalTo: self.view.rightAnchor, constant: -20).isActive = true
  		
  		baseView.backgroundColor = .white
  		baseView.layer.cornerRadius = 10
  		baseView.layer.shadowColor = UIColor.init(red: 66/255.0, green: 93/255.0, blue: 146/255.0, alpha: 0.44).cgColor
  		baseView.layer.shadowOpacity = 1
  		baseView.layer.shadowRadius = 8
  		
  		
  		titleLabel.textColor = UIColor.init(named: "TitleColor")
  		titleLabel.font = Font.init(.medium, size: .size1).font
  		
  		descriptionLabel.textColor = UIColor.init(named: "TitleColor")
  		descriptionLabel.font = Font.init(.normal, size: .size2).font
  		
  		activateButton.setTitle("AktivizÄ“t", for: .normal)
  		activateButton.setTitleColor(UIColor.init(named: "TitleColor"), for: .normal)
  		activateButton.titleLabel?.font = Font.init(.medium, size: .size2).font
  		
  		cancelButton.setTitle("Atcelt", for: .normal)
  		cancelButton.setTitleColor(UIColor.init(named: "CancelButtonColor"), for: .normal)
  		cancelButton.titleLabel?.font = Font.init(.medium, size: .size2).font
  		
  		backgroundView.backgroundColor = .clear
  		
  		activateButton.addTarget(self, action: NSSelectorFromString("activateButtonPressed"), for: .touchUpInside)
  		cancelButton.addTarget(self, action: NSSelectorFromString("cancelButtonPressed"), for: .touchUpInside)
  		stepper.addTarget(self, action:NSSelectorFromString("stepperPressed"), for: .valueChanged)
  	}

  	// MARK: Functions

	@objc func appMovedToForeground() {
		notifAnimationView.startAnimating()
	}
	
	@objc func appMovedToBackground() {
		notifAnimationView.layer.removeAllAnimations()
		notifAnimationView.layoutIfNeeded()
	}
		
	@objc func activateButtonPressed() {
  		interactor?.activateButtonPressed()
  	}
  	
  	@objc func cancelButtonPressed() {
  		interactor?.cancelButtonPressed()
  	}
  	
  	@objc func stepperPressed() {
  		interactor?.stepperValueChangedTo(value: Int(stepper.value))
  	}
  	
  	func getData() {
    	let request = PushNotifSetup.SetUp.Request()
    	interactor?.getDataToShow(request: request)
  	}

  	func updateData(viewModel: PushNotifSetup.SetUp.ViewModel) {
  		descriptionLabel.text = viewModel.displayedItem.description
  		stepper.minimumValue = Double(viewModel.displayedItem.minValue)
  		stepper.maximumValue = Double(viewModel.displayedItem.maxValue)
  		stepper.value = Double(viewModel.displayedItem.value)
  	}
}
